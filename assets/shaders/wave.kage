package main
var Time float
var Pi float
// var Cursor vec2


// w - wave length in pixel
// amplitude - of the wave
// theta - angle of the wave
func wave(pos vec4, w float, amp float, theta float) vec4 {

	pt := pos/640.0  // texel coord

	var ptt vec2 // rotate by theta
	ptt.x = pt.x *cos(theta) - pt.y * sin(theta)
	ptt.y = pt.x *sin(theta) + pt.y * cos(theta)

	n := 640.0 / w
	vel := 1.249 * sqrt(w) / 15.24  
	// 14.24 is abritary, 1.249 is based on deep ocean wave physics
	ptt = ptt + Time / 10000 * vel

	k := 2 * Pi * n  // wavelength
	fx := k * ptt.x
	fy := k * ptt.y

	//fourier series
	fourierZ := 0.1 + 4.0*amp/pow(Pi, 2)*cos(fx) + amp/pow(Pi,2)*cos(2*fx) + 
	 0.1 + 4.0*amp/pow(Pi, 2)*sin(fy) + amp/pow(Pi,2)*sin(2*fy)
	
	// gradient at x
	// grad := normalize(vec3(1.0, 0.0, k * amplitude * cos(f)  ))
	// normal := cross(vec3(0.0,1.0,0.0), grad)

	// if fourierZ < 0.15 {
	// 	fourierZ = 0.0
	// }
	waveX := vec4(0, 0.0, fourierZ ,0.0)
	return waveX

}


func Fragment(pos vec4, texel vec2, color vec4) vec4 {
	oceanBlue := vec4(0.0, 0.61, 0.77, 1.0)


	// wavelength, amplitude, direction
	c := wave(pos, 600, 0.2, 0.0) + 
		wave(pos, 500, 0.2, Pi)  + 
		wave(pos, 400, 0.2, Pi/2.0) + 
		wave(pos, 300, 0.2, 3.*Pi/2.0) + 
		wave(pos, 200, 0.2, 7.*Pi/8.) + 
		wave(pos, 100, 0.2, Pi/8.)// +

	if c.z < 1.0 {
		c.z = 0
	}
	c = oceanBlue + c
	return c
}